
/* Copyright (c) 2013 Cosku Acay, http://www.coskuacay.com */

#include "LineDetector.h"

const byte LineDetector::_maskHigh[8] = {
  0xFF, 0x7F, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x01};

const byte LineDetector::_maskLow[8] = {
  0xFF, 0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x80};

const byte LineDetector::_popCntTable[256] = {
  0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4,
  2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
  2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4,
  2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
  2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6,
  4, 5, 5, 6, 5, 6, 6, 7, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
  2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5,
  3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
  2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6,
  4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
  4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8};

const byte LineDetector::_centroidTable[256] = {
  0, 7, 6, 13, 5, 12, 11, 18, 4, 11, 10, 17, 9, 16, 15, 22, 3, 10, 9, 16,
  8, 15, 14, 21, 7, 14, 13, 20, 12, 19, 18, 25, 2, 9, 8, 15, 7, 14, 13, 20,
  6, 13, 12, 19, 11, 18, 17, 24, 5, 12, 11, 18, 10, 17, 16, 23, 9, 16, 15,
  22, 14, 21, 20, 27, 1, 8, 7, 14, 6, 13, 12, 19, 5, 12, 11, 18, 10, 17, 16,
  23, 4, 11, 10, 17, 9, 16, 15, 22, 8, 15, 14, 21, 13, 20, 19, 26, 3, 10, 9,
  16, 8, 15, 14, 21, 7, 14, 13, 20, 12, 19, 18, 25, 6, 13, 12, 19, 11, 18, 17,
  24, 10, 17, 16, 23, 15, 22, 21, 28, 0, 7, 6, 13, 5, 12, 11, 18, 4, 11, 10,
  17, 9, 16, 15, 22, 3, 10, 9, 16, 8, 15, 14, 21, 7, 14, 13, 20, 12, 19, 18,
  25, 2, 9, 8, 15, 7, 14, 13, 20, 6, 13, 12, 19, 11, 18, 17, 24, 5, 12, 11, 18,
  10, 17, 16, 23, 9, 16, 15, 22, 14, 21, 20, 27, 1, 8, 7, 14, 6, 13, 12, 19, 5,
  12, 11, 18, 10, 17, 16, 23, 4, 11, 10, 17, 9, 16, 15, 22, 8, 15, 14, 21, 13,
  20, 19, 26, 3, 10, 9, 16, 8, 15, 14, 21, 7, 14, 13, 20, 12, 19, 18, 25, 6,
  13, 12, 19, 11, 18, 17, 24, 10, 17, 16, 23, 15, 22, 21, 28};

LineDetector::LineDetector(byte imageWidth)
{
  _imageWidth = imageWidth;
}

byte LineDetector::computeCentroid(byte* imageRow, byte threshold)
{
  unsigned int base = 0;
  unsigned int total = 0;
  unsigned int nPixels = 0;
  for (byte* curr = imageRow; curr < imageRow + _imageWidth; curr++)
  {
    byte data = *curr;
    nPixels += _popCntTable[data];
    total += _popCntTable[data] * base;
    total += _centroidTable[data];
    base += 8;
  }

  if (nPixels == 0) return 255;
  if (nPixels < threshold) return 255;
  return (byte)(total / nPixels);
}


